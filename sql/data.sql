-- MySQL dump 10.13  Distrib 8.0.23, for Win64 (x86_64)
--
-- Host: localhost    Database: tt_code
-- ------------------------------------------------------
-- Server version	5.7.33-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `template`
--

DROP TABLE IF EXISTS `template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `template` (
                            `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
                            `name` varchar(255) NOT NULL COMMENT '模板名称',
                            `file_type` varchar(255) NOT NULL COMMENT '文件类型',
                            `content` text COMMENT '模板内容',
                            `create_user` varchar(255) NOT NULL COMMENT '创建人',
                            `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                            `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
                            PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='模板表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `template`
--

LOCK TABLES `template` WRITE;
/*!40000 ALTER TABLE `template` DISABLE KEYS */;
INSERT INTO `template` VALUES (1,'Dao','java','package ${package}.${module}.dao;\n\nimport ${package}.${module}.vo.${TableName}VO;\nimport ${package}.${module}.po.${TableName}PO;\n\nimport java.util.List;\n\npublic interface ${TableName}Dao {\n\n	 ${TableName}PO findById(Integer id);\n\n    List<${TableName}PO> findByCondition(${TableName}VO ${tableName});\n\n    void save(${TableName}PO ${tableName});\n\n    int update(${TableName}PO ${tableName});\n\n    int deleteById(Integer id);\n\n}','admin','2020-10-24 15:10:31','2020-10-24 15:10:31'),(2,'PO','java','package ${package}.${module}.po;\n\nimport lombok.Data;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.NoArgsConstructor;\n\n#if($hasDate)\nimport java.util.Date;\n#end\n\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ${TableName}PO {\n\n    #foreach($metaColumn in $columns)\n    /**\n     * $metaColumn.columnComment\n     */\n    private $metaColumn.columnType $metaColumn.columnName;\n    #end\n}\n','admin','2020-10-25 00:45:47','2020-10-25 00:45:47'),(3,'Service','java','package ${package}.${module}.service;\n\nimport ${package}.${module}.vo.${TableName}VO;\nimport ${package}.${module}.po.${TableName}PO;\n\nimport java.util.List;\n\npublic interface ${TableName}Service {\n\n    ${TableName}PO findById(Integer id);\n\n    List<${TableName}PO> findByCondition(${TableName}VO ${tableName});\n\n    void save(${TableName}PO ${tableName});\n\n    void update(${TableName}PO ${tableName});\n\n    void deleteById(Integer id);\n\n    List<${TableName}PO> findAll(${TableName}VO ${tableName});\n\n}','admin','2020-10-25 00:47:34','2020-10-25 00:47:34'),(4,'ServiceImpl','java','package ${package}.${module}.service.impl;\n\nimport com.github.pagehelper.PageHelper;\nimport ${package}.${module}.dao.${TableName}Dao;\nimport ${package}.${module}.vo.${TableName}VO;\nimport ${package}.${module}.po.${TableName}PO;\nimport ${package}.${module}.service.${TableName}Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n@Service\npublic class ${TableName}ServiceImpl implements ${TableName}Service {\n\n	@Autowired\n	private ${TableName}Dao ${tableName}Dao;\n\n	@Override\n	public ${TableName}PO findById(Integer id) {\n		return ${tableName}Dao.findById(id);\n	}\n\n	@Override\n	public List<${TableName}PO> findByCondition(${TableName}VO ${tableName}) {\n		PageHelper.startPage(${tableName}.getPageNum(), ${tableName}.getPageSize());\n		return ${tableName}Dao.findByCondition(${tableName});\n	}\n\n	@Override\n	@Transactional(rollbackFor = Exception.class)\n	public void save(${TableName}PO ${tableName}) {\n		${tableName}Dao.save(${tableName});\n	}\n\n	@Override\n	@Transactional(rollbackFor = Exception.class)\n	public void update(${TableName}PO ${tableName}) {\n		${tableName}Dao.update(${tableName});\n	}\n\n	@Override\n	@Transactional(rollbackFor = Exception.class)\n	public void deleteById(Integer id) {\n		${tableName}Dao.deleteById(id);\n	}\n\n	@Override\n	public List<${TableName}PO> findAll(${TableName}VO ${tableName}) {\n		return ${tableName}Dao.findByCondition(${tableName});\n	}\n}\n','admin','2020-10-25 00:49:12','2020-10-25 00:49:12'),(5,'Controller','java','package ${package}.${module}.controller;\n\nimport com.github.pagehelper.Page;\nimport ${package}.common.vo.Result;\nimport ${package}.${module}.vo.${TableName}VO;\nimport ${package}.${module}.po.${TableName}PO;\nimport ${package}.${module}.service.${TableName}Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@Slf4j\n@RequestMapping(\"/${module}/${tableName}\")\npublic class ${TableName}Controller {\n\n    @Autowired\n    private ${TableName}Service ${tableName}Service;\n\n    @GetMapping(\"/list\")\n    public Result getPageList(${TableName}VO ${tableName}) {\n        try {\n            List<${TableName}PO> ${tableName}List = ${tableName}Service.findByCondition(${tableName});\n            if (${tableName}List instanceof Page) {\n                Page page = (Page) ${tableName}List;\n                return Result.ok(${tableName}List, page.getPageNum(), page.getPageSize(), (int) page.getTotal());\n            }\n            return Result.ok(${tableName}List);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return Result.error(e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/all-list\")\n    public Result getAllList(${TableName}VO ${tableName}) {\n        try {\n            return Result.ok(${tableName}Service.findAll(${tableName}));\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return Result.error(e.getMessage());\n        }\n    }\n\n    @PostMapping(\"/save\")\n    public Result save(@RequestBody ${TableName}PO ${tableName}) {\n        try {\n            ${tableName}Service.save(${tableName});\n            return Result.ok();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return Result.error(e.getMessage());\n        }\n    }\n\n    @PostMapping(\"/update\")\n    public Result update(@RequestBody ${TableName}PO ${tableName}) {\n        try {\n            ${tableName}Service.update(${tableName});\n            return Result.ok();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return Result.error(e.getMessage());\n        }\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public Result remove(@PathVariable Integer id) {\n        try {\n            ${tableName}Service.deleteById(id);\n            return Result.ok();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return Result.error(e.getMessage());\n        }\n    }\n}\n','admin','2020-10-25 00:50:50','2020-10-25 00:50:50'),(6,'Mapper','xml','<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${package}.${module}.dao.${TableName}Dao\">\n\n	<select id=\"findById\" parameterType=\"java.lang.Integer\" resultType=\"${package}.${module}.po.${TableName}PO\">\n		select *\n		from ${table}\n		where id = #{id}\n	</select>\n\n	<select id=\"findByCondition\" parameterType=\"${package}.${module}.vo.${TableName}VO\" resultType=\"${package}.${module}.po.${TableName}PO\">\n		select *\n		from\n		${table}\n     <where>\n     #foreach($metaColumn in $columns)\n     #if($metaColumn.columnName!=\"id\" && $metaColumn.columnType!=\"Date\")\n       <if test=\"$metaColumn.columnName != null #if($metaColumn.columnType==\"String\") and $metaColumn.columnName != \'\' #end\">\n       		and `$metaColumn.column_name` = #{$metaColumn.columnName}\n       </if>\n     #end\n     #end\n		</where>\n	</select>\n\n	<insert id=\"save\" parameterType=\"${package}.${module}.po.${TableName}PO\">\n		<selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"java.lang.Integer\">\n			select last_insert_id()\n		</selectKey>\n		insert into ${table}\n		<trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n        #foreach($metaColumn in $columns)\n        #if(($metaColumn.columnName == \"createTime\"))\n        `create_time`,\n        #elseif(($metaColumn.columnName == \"updateTime\"))\n        `update_time`,\n        #elseif($metaColumn.columnName != \"id\")\n        <if test=\"$metaColumn.columnName != null\">\n        `$metaColumn.column_name`,\n        </if>\n        #end\n        #end\n		</trim>\n		<trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n        #foreach($metaColumn in $columns)\n        #if(($metaColumn.columnName == \"createTime\" || $metaColumn.columnName == \"updateTime\")&&$metaColumn.columnName != \"id\")\n         	now(),\n        #elseif($metaColumn.columnName != \"id\")\n        <if test=\"$metaColumn.columnName != null\">\n         	#{$metaColumn.columnName},\n        </if>\n        #end\n        #end\n		</trim>\n	</insert>\n\n	<update id=\"update\" parameterType=\"${package}.${module}.po.${TableName}PO\">\n		update ${table}\n		<set>\n        #foreach($metaColumn in $columns)\n        #if($metaColumn.columnName == \'updateTime\'&&$metaColumn.columnName != \'id\')\n        `$metaColumn.column_name` = now(),\n        #elseif($metaColumn.columnName != \'id\'&& $metaColumn.columnName != \'createTime\')\n        <if test=\"$metaColumn.columnName != null\">`$metaColumn.column_name` = #{$metaColumn.columnName}, </if>\n        #end\n        #end\n		</set>\n		where id = #{id}\n	</update>\n\n	<delete id=\"deleteById\" parameterType=\"java.lang.Integer\">\n		delete from ${table} where id = #{id}\n	</delete>\n	\n</mapper>','admin','2020-10-25 01:04:16','2020-10-25 01:04:16'),(7,'VO','java','package ${package}.${module}.vo;\n\nimport lombok.Data;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.NoArgsConstructor;\n\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ${TableName}VO {\n\n    private Integer pageNum = 1;\n\n    private Integer pageSize = 10;\n\n    #foreach($metaColumn in $columns)\n    #if($metaColumn.columnName!=\"id\" && $metaColumn.columnType!=\"Date\")\n    /**\n     * $metaColumn.columnComment\n     */\n    private $metaColumn.columnType $metaColumn.columnName;\n    #end\n    #end\n}\n','admin','2020-10-25 21:56:06','2020-10-25 21:56:06'),(8,'React','js','import React, { useState, useEffect, useRef } from \'react\'\n\nimport { Button, Divider, Input, Table, Form, Modal, notification } from \'antd\'\n\nexport default() => {\n  const [tableData, setTableData] = useState([])\n  const [query, setQuery] = useState({\n    pageNum: 1,\n    pageSize: 10,\n    total: 0,\n    fetch: false,\n    #foreach($metaColumn in $columns)\n    #if($metaColumn.columnName!=\"id\" && $metaColumn.columnType!=\"Date\")\n    $metaColumn.columnName:\'\',\n    #end\n    #end\n  })\n  const [tableLoading, setTableLoading] = useState(false)\n  const [formModalShow, setFormModalShow] = useState(false)\n  const formInstance = useRef(null)\n  const [formModalSubmitButtonLoading, setFormModalSubmitButtonLoading] = useState(false)\n  useEffect(() => {\n    getTableData()\n  }, [])\n\n  useEffect(() => {\n    if (query.fetch) {\n      getTableData()\n    }\n  }, [query])\n  const getTableData = () => {\n    let url = \'/${module}/${tableName}/list\'\n    if (query) {\n        let paramsArray = [];\n        Object.keys(query).forEach(key => paramsArray.push(key + \'=\' + query[key]))\n        if (url.search(/\\?/) === -1) {\n            url += \'?\' + paramsArray.join(\'&\')\n        } else {\n            url += \'&\' + paramsArray.join(\'&\')\n        }\n    }\n    setTableLoading(true)\n    fetch(url)\n    .then(res=>res.json())\n    .then(res => {\n      if(res.data.status === 200){\n          setTableData(res.data.data)\n          setQuery({...query, total:res.data.total, fetch:false})\n      } else{\n          notification.error({ message: res.data.msg, duration: 3 })\n      }\n    }).catch(error => {\n      console.error(error)\n    }).finally(()=>{\n      setTableLoading(false)\n    })\n  }\n\n  const save = (data) => {\n    setFormModalSubmitButtonLoading(true)\n    if (!data.id) {\n      fetch(\'/${module}/${tableName}/save\',{\n            method:\'POST\',\n            headers:{\n                \'Content-Type\':\'application/json\',\n            },\n            body:JSON.stringify({ ...data }),\n       })\n      .then(res=>res.json())\n      .then(res => {\n        if(res.data.status===200){\n            setFormModalShow(false)\n            notification.success({ message: \'添加成功\', duration: 3 })\n            setQuery({ ...query, pageNum: 1, fetch: true })\n        } else{\n            notification.error({ message: res.data.msg, duration: 3 })\n        }\n      }).finally(()=>{\n		setFormModalSubmitButtonLoading(false)\n      })\n    } else {\n      fetch(\'/${module}/${tableName}/update\',{\n            method:\'POST\',\n            headers:{\n                \'Content-Type\':\'application/json\',\n            },\n            body:JSON.stringify({ ...data }),\n       })\n      .then(res=>res.json())\n      .then(res => {\n        if(res.data.status===200){\n            setFormModalShow(false)\n            notification.success({ message: \'修改成功\', duration: 3 })\n            setQuery({ ...query, pageNum: 1, fetch: true })\n        } else{\n            notification.error({ message: res.data.msg, duration: 3 })\n        }\n      }).finally(()=>{\n		setFormModalSubmitButtonLoading(false)\n      })\n    }\n  }\n  const deleteData = (data) => {\n    Modal.confirm({\n      title: \'删除\',\n      content: `确认删除${data.id} ?`,\n      okText: \'确认\',\n      cancelText: \'取消\',\n      onOk: () => {\n        fetch(`/${module}/${tableName}/delete/${data.id}`,{\n                method:\'POST\',\n                headers:{\n                    \'Content-Type\':\'application/json\',\n                },\n                body:JSON.stringify(data),\n        })\n        .then(res=>res.json())\n        .then(res => {\n            if(res.data.status===200){\n                notification.success({ message: \'删除成功\', duration: 3 })\n                setQuery({ ...query, fetch: true })\n            } else{\n                notification.error({ message: res.data.msg, duration: 3 })\n            }\n        })\n      }\n    })\n  }\n\n  const columns = [ \n    #foreach($metaColumn in $columns)\n    {\n        title: \'$metaColumn.columnComment\',\n        align: \'center\',\n        dataIndex:\'$metaColumn.columnName\',\n        key:\'$metaColumn.columnName\'\n    },\n    #end\n    {\n    title: \'操作\',\n    align: \'center\',\n    width: \'20%\',\n    render: (value, record) => {\n      return <div>\n        <Divider type=\'vertical\' />\n        <Button type=\'primary\' onClick={() => {\n          setFormModalShow(true)\n          formInstance.current.setFieldsValue({ ...record })\n        }}>编辑</Button>\n        <Divider type=\'vertical\' />\n        <Button type=\'danger\' onClick={() => {\n          deleteData(record)\n        }}>删除</Button>\n      </div>\n    }\n  }]\n  const getFieldValue = key => {\n    return formInstance.current && formInstance.current.getFieldValue(key)\n  }\n  const renderFormModal = () => {\n    return <Modal\n      title={getFieldValue(\'id\') ? \'修改\' : \'添加\'}\n      visible={formModalShow}\n      forceRender\n      okText={\'提交\'}\n      cancelText={\'取消\'}\n      footer={<div>\n        <Button onClick={() => {\n          setFormModalShow(false)\n        }}>取消</Button>\n        <Button loading={formModalSubmitButtonLoading} type=\'primary\' onClick={() => {\n          formInstance.current.validateFields()\n            .then(values => {\n              // 表单校验成功\n              save(formInstance.current.getFieldValue())\n            }).catch(e => {\n              // 表单校验失败\n              console.log(e)\n            })\n        }}>提交</Button>\n      </div>}\n      onCancel={() => {\n        setFormModalShow(false)\n      }}\n    >\n      <Form ref={formInstance} labelCol={{ span: 4 }} wrapperCol={{ span: 16 }}>\n        #foreach($metaColumn in $columns)\n        #if($metaColumn.columnName!=\"id\" && $metaColumn.columnType!=\"Date\")\n        <Form.Item label=\'$metaColumn.columnComment\' name=\'$metaColumn.columnName\' rules={[{ required: true, message: \'必填\' }]} hasFeedbac>\n          <Input/>\n        </Form.Item>\n        #end\n        #end\n      </Form>\n    </Modal>\n  }\n  return <div className=\'${tableName}-contain\'>\n    <div className=\'${tableName}-contain-search\' style={{ marginBottom: 10 }}>\n      <Form name=\'horizontal_login\' layout=\'inline\'>\n        #foreach($metaColumn in $columns)\n        #if($metaColumn.columnName!=\"id\" && $metaColumn.columnType!=\"Date\")\n        <Form.Item>\n          <Input value={query.$metaColumn.columnName} onChange={e => { setQuery({ ...query, $metaColumn.columnName: e.target.value, fetch: false }) }} placeholder=\'$metaColumn.columnComment\' onPressEnter={() => setQuery({ ...query, 		pageNum: 1, fetch: true })} />\n        </Form.Item>\n        #end\n        #end\n\n        <Form.Item >\n          <Button type=\'primary\' onClick={() => { setQuery({ ...query, pageNum: 1, fetch: true }) }} >查询</Button>\n        </Form.Item>\n        <Form.Item >\n          <Button type=\'primary\' onClick={() => {\n            formInstance.current.setFieldsValue({ id: null, parentId: 0 })\n            setFormModalShow(true)\n          }} >添加</Button>\n        </Form.Item>\n      </Form>\n    </div>\n    <div className=\'${tableName}-contain-content\'>\n      <Table\n        rowKey=\'id\'\n        loading={tableLoading}\n        dataSource={tableData}\n        columns={columns}\n        pagination={{\n          current: query.pageNum,\n          pageSize: query.pageSize,\n          total: query.total,\n          showSizeChanger: false,\n          onChange: page => {\n            setQuery({ ...query, pageNum: page, fetch: true })\n          }\n        }} />\n    </div>\n    {renderFormModal()}\n  </div>\n}\n','admin','2020-10-31 11:49:26','2020-10-31 11:49:26');
/*!40000 ALTER TABLE `template` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-04-24 13:52:51
